{
    "title": "Aritmetica Modulară",
    "description": "Concepte și aplicații ale aritmeticii modulare în programare",
    "tags": ["aritmetica_modulara", "matematică", "algoritmi", "congruență", "invers_modular"],
    "sections": [
        {
            "title": "Introducere",
            "content": "În numeroase probleme de informatică se cere determinarea restului împărțirii unui anumit număr (de regulă rezultat ale unui calcul) la o valoare dată, N. De cele mai multe ori numărul nu poate fi determinat direct, valoarea sa fiind prea mare. În aceste situații intervine aritmetica modulară, în care restul cerut se determină făcând operații cu resturi la împărțirea cu N a unor rezultate parțiale."
        },
        {
            "title": "Congruență Modulo N",
            "content": "Fie N >= 1 un număr natural și două numere întregi a și b. Spunem că a și b sunt congruente modulo N, a = b mod N dacă N|(a - b). Echivalent, dacă a și b dau același rest la împărțirea cu N."
        },
        {
            "title": "Operații de Bază",
            "subsections": [
                {
                    "title": "Adunare și Înmulțire",
                    "content": "Congruența modulo n este compatibilă cu adunarea și înmulțirea numerelor întregi:\n- Dacă a = x mod N și b = y mod N, atunci a + b = x + y mod N\n- Dacă a = x mod N și b = y mod N, atunci a * b = x * y mod N",
                    "code_example": {
                        "description": "Calculul restului împărțirii produsului la N",
                        "code": "int P = 1;\nfor (int i = 1; i <= n; i++) {\n    P = (P * A[i]) % N;\n}"
                    }
                },
                {
                    "title": "Scădere",
                    "content": "Pentru numerele naturale a >= b și N >= 1, trebuie să avem grijă la rezultatul negativ. Dacă X = (a%N - b%N)%N este negativ, adăugăm N pentru a obține rezultatul corect."
                }
            ]
        },
        {
            "title": "Împărțire și Invers Modular",
            "content": "Congruența modulo N nu este compatibilă cu împărțirea. Pentru a determina rezultatul modulo N al expresiilor cu împărțiri, folosim inversul modular.",
            "subsections": [
                {
                    "title": "Definiție Invers Modular",
                    "content": "Pentru 1 <= A < N, inversul lui A modulo N este un număr natural 1 <= A^(-1) < N cu proprietatea că A * A^(-1) = 1 mod N."
                },
                {
                    "title": "Calculul Inversului Modular",
                    "content": "Există mai multe metode de calcul:\n1. Căutare liniară: O(N)\n2. Teorema lui Euler: O(log₂N * √N)\n3. Algoritmul lui Euclid extins: O(log N)",
                    "code_example": {
                        "description": "Implementare algoritm Euclid extins pentru invers modular",
                        "code": "void euclid(int a, int b, int &x, int &y) {\n    if(b == 0) {\n        x = 1, y = 1;\n    } else {\n        int x1, y1;\n        euclid(b, a % b, x1, y1);\n        x = y1;\n        y = x1 - a / b * y1;\n    }\n}"
                    }
                }
            ]
        },
        {
            "title": "Aplicații",
            "content": "Aritmetica modulară are numeroase aplicații în programare, inclusiv:\n- Calculul combinărilor modulo un număr prim\n- Criptografie\n- Generarea de numere aleatoare\n- Verificarea de validitate a datelor"
        }
    ],
    "examples": [
        {
            "title": "Calculul factorialului modulo N",
            "description": "Calculul restului împărțirii lui N! la un număr dat",
            "code": "int P = 1;\nfor (int i = 1; i <= n; i++) {\n    P = (P * i) % N;\n}"
        },
        {
            "title": "Diferența factorialelor modulo N",
            "description": "Calculul restului împărțirii diferenței a două factoriale la un număr prim",
            "code": "int n, m;\nconst int N = 1009;\ncin >> n >> m; // n <= m\nint A = 1, B = 1;\nfor(int i = 1; i <= m; i++)\n    A = (A * i) % N;\nfor(int i = 1; i <= n; i++)\n    B = (B * i) % N;\nint X = A - B;\nif(X < 0)\n    X += N;\ncout << X;"
        }
    ]
} 