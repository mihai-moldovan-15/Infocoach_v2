[
  {
    "id": "1",
    "title": "Introducere în Algoritmul lui Lee",
    "content": "Algoritmul lui Lee este folosit pentru determinarea ieșirii dintr-un labirint sau în alte probleme similare cu aceasta.",
    "tags": ["algoritmi", "lee", "labirint", "BFS", "coadă", "matrice", "C++"]
  },
  {
    "id": "2",
    "title": "Problema labirintului",
    "content": "Considerăm un labirint reprezentat printr-o matrice cu n linii și m coloane, în care elementele egale cu 0 reprezintă camere libere, iar cele egale cu 1 reprezintă camere blocat. Un mobil se deplasează prin labirint, trecând dintr-o cameră în alta dacă acestea se învecinează pe linie sau pe coloană. Determinați numărul minim de pași pe care îi face mobilul pentru a ieși din labirint (a ajunge pe chenarul matricei).",
    "tags": ["algoritmi", "lee", "labirint", "matrice", "pași minimi", "C++"]
  },
  {
    "id": "3",
    "title": "Algoritmul de bază",
    "content": "Pentru rezolvarea problemei procedăm astfel:\n1. marcăm în matrice elementele libere cu 0, iar obstacolele cu -1 (valorile pozitive sunt folosite în alt scop)\n2. marcăm poziția de start cu 1\n3. pentru fiecare k=1,2,3,...\n   - analizăm elementele marcate cu valoarea k și marcăm cu k+1 toți vecinii săi care sunt liberi și nemarcați\n   - dacă pentru un anumit k nu găsim niciun element egal cu k, ne oprim",
    "tags": ["algoritmi", "lee", "labirint", "marcare", "vecini", "C++"]
  },
  {
    "id": "4",
    "title": "Lee cu coadă - optimizare",
    "content": "Dacă pentru fiecare k parcurgem toate elementele matricei labirint pentru a identifica elementele egale cu k, algoritmul de mai sus este neeficient. O soluție mult mai bună este să folosim o coadă:\n1. marcăm poziția de început cu 1 și o adăugăm în coadă\n2. expandăm coada. Cât timp coada este nevidă:\n   - scoatem din coadă un element, cu coordonatele (i,j)\n   - analizăm vecinii acestuia:\n     - dacă vecinul curent (iv,jv) este liber și nemarcat, îl marcăm în matrice cu o valoare mai mare cu 1 decât elementul (i,j) – A[iv][jv] = A[i][j] + 1; – și îl adăugăm în coadă.",
    "tags": ["algoritmi", "lee", "coadă", "BFS", "optimizare", "C++", "STL"]
  },
  {
    "id": "5",
    "title": "Implementare C++ - Lee cu coadă",
    "content": "void Lee(int istart ,int jstart)\n{\n    queue<pair<int,int>> Q;\n    //initializare coada\n    Q.push(make_pair(istart , jstart));\n    //marcare pozitie de start\n    A[istart][jstart] = 1;\n    while(! Q.empty()) // cat timp coada este nevida\n    {   \n        int i = Q.front().first, j = Q.front().second; // determinam elementul de la inceputul cozii\n        for(int k = 0 ; k < 4 ; k ++)\n        {\n            int iv = i + di[k], jv = j + dj[k]; // coordonatele vecinului\n            if(iv >= 1 && iv <= n && jv >= 1 && jv <= m // element în matrice\n                && A[iv][jv] == 0) // element liber si nemarcat\n            {\n                // marcam elementul vecin cu o valoare mai mare\n                A[iv][jv] = A[i][j] + 1;\n                // il adaugam in coada\n                Q.push(make_pair(iv , jv));\n            }\n        }\n        Q.pop(); // eliminam din coada\n    }\n}",
    "tags": ["algoritmi", "lee", "C++", "coadă", "STL", "implementare", "BFS"]
  },
  {
    "id": "6",
    "title": "Reconstituirea traseului - concepte",
    "content": "În unele probleme se dau două poziții în matricea labirint, (istart,jstart) și (istop,jstop) și se cere determinarea celui mai scurt traseu de la poziția (istart,jstart) la poziția (istop,jstop). Operația se va realiza începând de la poziția finală spre cea inițială. Dacă poziția curentă a traseului are coordonatele (i,j), atunci poziția de dinainte va fi acel vecin (iv,jv) pentru care A[i][j] == A[iv][jv] + 1. Dacă sunt mai mulți asemenea vecini, oricare dintre ei este corect.",
    "tags": ["algoritmi", "lee", "traseu", "reconstituire", "cel mai scurt drum", "C++"]
  },
  {
    "id": "7",
    "title": "Metode de reconstituire traseu",
    "content": "Deoarece elementele traseului se determină în ordine inversă, nu putem să afișăm direct coordonatele elementelor de pe traseu. Avem două soluții:\n1. să reconstituim traseul folosind un subprogram recursiv, care să aibă ca parametri coordonatele elementului curent, autoapelul să se facă pentru coordonatele vecinului aflat în traseul determinat înaintea elementului curent, iar afișarea să se facă la revenirea din autoapel;\n2. să reconstitui traseul iterativ și să memorăm coordonatele elementelor de pe traseu într-o structură corespunzătoare (tablou unidimensional de structuri, vector din STL, pereche de tablouri unidimensionale), iar la final să afișam elementele structurii de date în ordine inversă.",
    "tags": ["algoritmi", "lee", "traseu", "recursiv", "iterativ", "C++", "STL"]
  },
  {
    "id": "8",
    "title": "Reconstituire recursivă traseu",
    "content": "void Traseu(int i, int j , int lg)\n{\n    if(A[i][j] == 1)\n    {\n        cout << lg << \"\\n\";\n        cout << i << \" \" << j << \"\\n\";\n    }\n    else\n    {\n        int p = -1;\n        for(int k = 0 ; k < 4 && p == -1 ; k ++)\n            if(A[i][j] == A[i+di[k]][j+dj[k]] + 1)\n                p = k;\n        Traseu1(i + di[p] , j + dj[p] , lg + 1);\n        cout << i << \" \" << j << \"\\n\";\n    }\n}\n\nFuncția C++ de mai sus afișează mai întâi lungimea traseului, apoi coordonatele elementelor de pe traseu. Desigur, lungimea traseului putea fi determinată în mod direct, din matrice. Apelul principal va fi:\nTraseu(istart , jstart , 1);",
    "tags": ["algoritmi", "lee", "traseu", "recursiv", "C++", "implementare"]
  },
  {
    "id": "9",
    "title": "Reconstituire nerecursivă traseu",
    "content": "void Traseu2(int istop, int jstop)\n{\n    vector<pair<int,int>> V;\n    int i = istop , j = jstop;\n    V.push_back(make_pair(i , j));\n    do\n    {\n        int p = -1;\n        for(int k = 0 ; k < 4 && p == -1 ; k ++)\n            if(A[i][j] == A[i+di[k]][j+dj[k]] + 1)\n                p = k;\n        i = i + di[p] , j = j + dj[p];\n        V.push_back(make_pair(i , j));\n    }\n    while(A[i][j] != 1);\n    cout << V.size() << '\\n';\n    for(vector<pair<int,int>>::reverse_iterator I = V.rbegin() ; I != V.rend() ; I ++)\n        cout << I->first << \" \" << I->second << '\\n';\n}\n\nPentru memorarea coordonatelor elementelor de pe traseu am folosit un vector din STL. Bineînțeles, am fi putut folosi și un tablou standard C și, de asemenea, am fi putut parcurge vectorul cu un indice în loc de iterator.",
    "tags": ["algoritmi", "lee", "traseu", "iterativ", "C++", "STL", "vector", "implementare"]
  }
]