[
  {
    "id": "1",
    "title": "Structuri Neomogene în C++",
    "content": "Utilizarea structurilor pentru gruparea datelor de tipuri diferite",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "2",
    "title": "Structuri Neomogene în C++ - Introducere",
    "content": "De multe ori datele folosite într-un program caracterizează obiecte/fenomene din realitate, iar acestea au mai multe caracteristici decât un simplu număr sau un șir de caractere. Structurile neomogene permit gruparea acestor date de tipuri diferite într-o singură entitate.",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "3",
    "title": "Structuri Neomogene în C++ - Exemplu de Date Complexe",
    "content": "",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "4",
    "title": "Structuri Neomogene în C++ - Exemplu de Date Complexe - Caracteristicile unei Persoane",
    "content": "O persoană poate fi caracterizată prin mai multe informații de tipuri diferite:\n1. nume – șir de caractere\n2. prenume – șir de caractere\n3. sex – caracter (M/F)\n4. vârsta – număr natural\n5. salariu – număr real",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "5",
    "title": "Structuri Neomogene în C++ - Problema Gestionării Datelor",
    "content": "Fără structuri, gestionarea datelor complexe ar necesita:\n1. Mai multe variabile separate pentru fiecare caracteristică\n2. Pentru n persoane, ar fi necesare n vectori\n3. Sincronizarea elementelor vectorilor devine complicată\n4. Codul devine mai greu de întreținut",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "6",
    "title": "Structuri Neomogene în C++ - Soluția: Structuri",
    "content": "",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "7",
    "title": "Structuri Neomogene în C++ - Soluția: Structuri - Definiție",
    "content": "O structură este un tip de date care înglobează mai multe date componente, numite câmpuri sau membri, fiecare de un anumit tip precizat la definiția structurii.",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "8",
    "title": "Structuri Neomogene în C++ - Soluția: Structuri - Avantaje",
    "content": "1. Gruparea logică a datelor conexe\n2. Simplificarea gestionării datelor complexe\n3. Reducerea numărului de variabile necesare\n4. Îmbunătățirea organizării codului\n5. Facilitarea sincronizării datelor",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "9",
    "title": "Structuri Neomogene în C++ - Utilizare",
    "content": "Fiecare câmp al structurii:\n1. Memorează o valoare specifică\n2. Poate fi tratat ca o variabilă de tipul său\n3. Poate fi supus operațiilor specifice tipului său (citire, afișare, atribuire)\n4. Este accesibil prin intermediul variabilei de tip structură",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  },
  {
    "id": "10",
    "title": "Structuri Neomogene în C++ - Observații Importante",
    "content": "1. Structurile permit gruparea logică a datelor conexe\n2. Fiecare câmp poate fi de un tip diferit\n3. Accesul la câmpuri se face prin intermediul variabilei de tip structură\n4. Structurile simplifică gestionarea datelor complexe\n5. Codul devine mai ușor de întreținut și de înțeles",
    "tags": [
      "structuri",
      "tipuri_date",
      "C++",
      "date_compuse",
      "grupare_date"
    ]
  }
]