[
  {
    "id": "1",
    "title": "Algoritmul QuickSort",
    "content": "Explicație detaliată a algoritmului QuickSort și implementarea sa în C++",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "2",
    "title": "Algoritmul QuickSort - Introducere",
    "content": "QuickSort sau Sortarea rapidă este o metodă eficientă de sortare a unui tablou, descoperită în 1960 de programatorul britanic C.A.R. Hoare. Pentru un set de n valori oarecare algoritmul efectuează O(n * logn) comparații, dar în cazul cel mai nefavorabil se efectuează O(n^2) comparații.",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "3",
    "title": "Algoritmul QuickSort - Principii de Funcționare",
    "content": "Algoritmul este de tip divide et impera; el sortează o secvență a tabloului (inițial întreg tabloul), astfel:\n\n1. Se alege un element special al listei, numit pivot\n2. Se ordonează elementele listei, astfel încât toate elementele din stânga pivotului să fie mai mici sau egale cu acesta, și toate elementele din dreapta pivotului să fie mai mari sau egale cu acesta\n3. Se continuă recursiv cu secvența din stânga pivotului și cu cea din dreapta lui",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "4",
    "title": "Algoritmul QuickSort - Implementare în C++",
    "content": "",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "5",
    "title": "Algoritmul QuickSort - Implementare în C++ - Funcția Pivot",
    "content": "int pivot(int A[], int st, int dr) {\n    // partitionăm vectorul A - toate elementele mai mici decat A[dr] ajung in stanga acestuia,\n    // iar toate elementele mai mari ajung in dreapta\n    int poz = st;\n    for (int i = st; i < dr; i ++)\n        if (A[i] < A[dr]) // pozitionam in stanga\n            swap(A[i], A[poz ++]);\n\n    swap(A[poz], A[dr]); // aducem A[dr] pe locul potrivit\n\n    return poz;\n}",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "6",
    "title": "Algoritmul QuickSort - Implementare în C++ - Funcția QuickSort",
    "content": "void QuickSort(int A[], int st, int dr) {\n    if (st < dr) {\n        int p = pivot(A, st, dr);\n        QuickSort(A, st, p - 1);\n        QuickSort(A, p + 1, dr);\n    }\n}",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "7",
    "title": "Algoritmul QuickSort - Complexitate",
    "content": "",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "8",
    "title": "Algoritmul QuickSort - Complexitate - Cazul Mediu",
    "content": "O(n * log n) comparații",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "9",
    "title": "Algoritmul QuickSort - Complexitate - Cazul Cel Mai Nefavorabil",
    "content": "O(n^2) comparații",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "10",
    "title": "Algoritmul QuickSort - Observații Importante",
    "content": "1. Alegerea pivotului este crucială pentru performanță\n2. Implementarea folosește ultimul element ca pivot\n3. Algoritmul este in-place (nu necesită memorie suplimentară)\n4. Nu este un algoritm stabil (nu păstrează ordinea relativă a elementelor egale)\n5. Este unul dintre cei mai rapizi algoritmi de sortare în practică",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  },
  {
    "id": "11",
    "title": "Algoritmul QuickSort - Best Practices",
    "content": "1. Alegeți un pivot bun (mediana din trei, element aleator)\n2. Implementați optimizări pentru subsecvențe mici\n3. Atenție la cazurile de bază\n4. Verificați limitele tabloului\n5. Considerați variante hibride pentru performanță mai bună",
    "tags": [
      "algoritmi",
      "sortare",
      "divide_et_impera",
      "C++",
      "complexitate",
      "pivot"
    ]
  }
]