[
  {
    "id": "1",
    "title": "Introducere în Mergesort",
    "content": "Mergesort (sortare prin interclasare) sortează un tablou folosind divide et impera: sortează prima jumătate, apoi a doua, și interclasează rezultatele.",
    "tags": ["mergesort", "sortare", "divide et impera", "interclasare"]
  },
  {
    "id": "2",
    "title": "Algoritm Mergesort",
    "content": "Cod: void MergeSort(int v[], int st, int dr) { if(st<dr) { int m=(st+dr)/2; MergeSort(v,st,m); MergeSort(v,m+1,dr); int i=st,j=m+1,k=0; while(i<=m&&j<=dr) if(v[i]<v[j]) tmp[++k]=v[i++]; else tmp[++k]=v[j++]; while(i<=m) tmp[++k]=v[i++]; while(j<=dr) tmp[++k]=v[j++]; for(i=st,j=1;i<=dr;i++,j++) v[i]=tmp[j]; } }",
    "tags": ["mergesort", "algoritm", "c++", "interclasare"]
  },
  {
    "id": "3",
    "title": "Observații Mergesort",
    "content": "Complexitate: O(n*log n). Necesită spațiu suplimentar (tablou tmp). Declarația locală a tmp poate supraîncărca stiva; folosește alocare dinamică.",
    "tags": ["mergesort", "complexitate", "spațiu", "optimizare"]
  }
]