[
  {
    "id": "1",
    "title": "Introducere în căutarea binară",
    "content": "Căutarea binară se face pe vector ordonat (crescător), împărțind vectorul în jumătăți. Complexitate: O(log n). Căutarea secvențială e O(n).",
    "tags": ["căutare binară", "vector ordonat", "complexitate", "algoritm"]
  },
  {
    "id": "2",
    "title": "Algoritm pseudocod căutare binară",
    "content": "Găsește poziția x într-un vector v[] ordonat. Ieșire: poz (0 dacă nu găsește, poz>0 dacă găsește). Pseudocod: st=1, dr=n, poz=0; CÂTTIMP st≤dr SI poz=0: m=(st+dr)/2; DACA v[m]=x ATUNCI poz=m; ALTFEL DACA v[m]<x ATUNCI st=m+1; ALTFEL dr=m-1.",
    "tags": ["căutare binară", "pseudocod", "vector ordonat", "poziție"]
  },
  {
    "id": "3",
    "title": "Căutare binară cu condiție ≤ x",
    "content": "Găsește cel mai mare indice poz unde v[poz]≤x. Cod: int st=1, dr=n, poz=n+1; while(st<=dr) { int m=(st+dr)/2; if(v[m]>=x) { poz=m; dr=m-1; } else st=m+1; } if(v[poz]=x) x apare pe poz.",
    "tags": ["căutare binară", "condiție", "cel mai mare indice", "≤ x"]
  },
  {
    "id": "4",
    "title": "Poziția unui număr în vector",
    "content": "Returnează poziția x sau -1. Cod: int CautareBinaraPoz(int A[], int n, int x) { int st=1, dr=n; while(st<=dr) { int mij=(st+dr)/2; if(A[mij]==x) return mij; else if(A[mij]<x) st=mij+1; else dr=mij-1; } return -1; } Recursiv: int CautareBinaraPozRec(int A[], int st, int dr, int x) { if(st>dr) return -1; int mij=(st+dr)/2; if(A[mij]==x) return mij; else if(A[mij]<x) return CautareBinaraPozRec(A,mij+1,dr,x); return CautareBinaraPozRec(A,st,mij-1,x); }",
    "tags": ["căutare binară", "poziție", "vector ordonat", "recursiv"]
  },
  {
    "id": "5",
    "title": "Cel mai mic element ≥ x",
    "content": "Găsește cel mai mic indice poz unde A[poz]≥x. Cod: int CelMaiMicMaiMareSauEgal(int A[], int n, int val) { int st=1, dr=n, poz=-1; while(st<=dr) { int mij=(st+dr)/2; if(A[mij]>=val) { poz=mij; dr=mij-1; } else st=mij+1; } return poz; } Recursiv: int CelMaiMicMaiMareSauEgalRec(int A[], int st, int dr, int x) { if(st>dr) return -1; int mij=(st+dr)/2; if(A[mij]>=x) { int poz=CelMaiMicMaiMareSauEgalRec(A,st,mij-1,x); return poz!=-1?poz:mij; } return CelMaiMicMaiMareSauEgalRec(A,mij+1,dr,x); }",
    "tags": ["căutare binară", "cel mai mic", "≥ x", "recursiv"]
  },
  {
    "id": "6",
    "title": "Cel mai mare element ≤ x",
    "content": "Găsește cel mai mare indice poz unde A[poz]≤x. Cod: int celMaiMareMaiMicSauEgal(int A[], int n, int x) { int st=1, dr=n, poz=-1; while(st<=dr) { int mij=(st+dr)/2; if(A[mij]<=x) { poz=mij; st=mij+1; } else dr=mij-1; } return poz; } Recursiv: int CelMaiMareMaiMicSauEgalRec(int A[], int st, int dr, int x) { if(st>dr) return -1; int mij=(st+dr)/2; if(A[mij]<=x) { int poz=CelMaiMareMaiMicSauEgalRec(A,mij+1,dr,x); return poz!=-1?poz:mij; } return CelMaiMareMaiMicSauEgalRec(A,st,mij-1,x); }",
    "tags": ["căutare binară", "cel mai mare", "≤ x", "recursiv"]
  },
  {
    "id": "7",
    "title": "Prima apariție a lui x",
    "content": "Găsește prima poziție a lui x. Cod: int PozPrimeiAparitii(int A[], int n, int x) { int st=1, dr=n, poz=-1; while(st<=dr) { int mij=(st+dr)/2; if(A[mij]==x) { poz=mij; dr=mij-1; } else if(A[mij]<x) st=mij+1; else dr=mij-1; } return poz; } Recursiv: int PozPrimeiAparitiiRec(int A[], int st, int dr, int x) { if(st>dr) return -1; int mij=(st+dr)/2; if(A[mij]==x) { int poz=PozPrimeiAparitiiRec(A,st,mij-1,x); return poz==-1?mij:poz; } else if(A[mij]<x) return PozPrimeiAparitiiRec(A,mij+1,dr,x); return PozPrimeiAparitiiRec(A,st,mij-1,x); }",
    "tags": ["căutare binară", "prima apariție", "vector ordonat", "recursiv"]
  },
  {
    "id": "8",
    "title": "Ultima apariție a lui x",
    "content": "Găsește ultima poziție a lui x. Cod: int UltimaAparitie(int A[], int n, int x) { int st=1, dr=n, poz=-1; while(st<=dr) { int mij=(st+dr)/2; if(A[mij]==x) { poz=mij; st=mij+1; } else if(A[mij]<x) st=mij+1; else dr=mij-1; } return poz; } Recursiv: int UltimaAparitieRec(int A[], int st, int dr, int x) { if(st>dr) return -1; int mij=(st+dr)/2; if(A[mij]==x) { int poz=UltimaAparitieRec(A,mij+1,dr,x); return poz!=-1?poz:mij; } else if(A[mij]<x) return UltimaAparitieRec(A,mij+1,dr,x); return UltimaAparitieRec(A,st,mij-1,x); }",
    "tags": ["căutare binară", "ultima apariție", "vector ordonat", "recursiv"]
  },
  {
    "id": "9",
    "title": "Număr de apariții ale lui x",
    "content": "Calculează aparițiile lui x folosind prima și ultima poziție. Cod: int NumarAparitii(int A[], int n, int x) { int prima_aparitie=PozPrimeiAparitii(A,n,x); int ultima_aparitie=UltimaAparitie(A,n,x); if(prima_aparitie!=-1) return ultima_aparitie-prima_aparitie+1; return 0; }",
    "tags": ["căutare binară", "număr apariții", "vector ordonat"]
  },
  {
    "id": "10",
    "title": "Rădăcina pătrată aproximată",
    "content": "Găsește partea întreagă a rădăcinii pătrate a lui n. Cod: int ParteIntreagaRadical(int n) { int st=1, dr=n, val=-1; while(st<=dr) { int mij=(st+dr)/2; if(mij*mij<=n) { val=mij; st=mij+1; } else dr=mij-1; } return val; } Poate verifica pătrat/cub perfect.",
    "tags": ["căutare binară", "rădăcina pătrată", "aproximare", "pătrat perfect"]
  }
]